{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "[Tensorflow Probability] 一般化線形モデル（GLM）で Google Analytics コンバージョン予測",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/myoshimu/tfp/blob/master/tfp.glm_ga360\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3AiZBPbgk7xe",
        "colab_type": "text"
      },
      "source": [
        "# 一般化線形モデル(GLM)\n",
        "\n",
        "このノートブックでは、Google Analytics の EC サイト訪問データを使用してTensorFlowProbabilitの一般化線形モデルAPI(tfp.glm)でコンバージョン(購買)を予測します。 \n",
        "<table class=\"tfo-notebook-buttons\" align=\"left\">\n",
        "  <td>\n",
        "    <a target=\"_blank\" href=\"https://colab.research.google.com/github/myoshimu/tfp/blob/master/tfp.glm_ga360.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n",
        "  </td>\n",
        "  <td>\n",
        "    <a target=\"_blank\" href=\"https://github.com/myoshimu/tfp/blob/master/tfp.glm_ga360.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View source on GitHub</a>\n",
        "  </td>\n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cIKwy8yu3NiK",
        "colab_type": "text"
      },
      "source": [
        "## import modules"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QdpkMrtys41r",
        "colab_type": "code",
        "outputId": "4956a578-6920-49e9-f991-6b4fdd3a9cc3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "import tensorflow as tf\n",
        "import tensorflow_probability as tfp\n",
        "import pandas as pd\n",
        "#tf.enable_eager_execution()\n",
        "import numpy as np\n",
        "print(tf.__version__)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.14.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R_MC7ZcI3UuP",
        "colab_type": "text"
      },
      "source": [
        "## read data and train test split"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NUV0lLjatAsF",
        "colab_type": "code",
        "outputId": "3a37f934-2795-459f-a032-943c14165222",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "df = pd.read_csv(\"https://raw.githubusercontent.com/myoshimu/tfp/master/ga360_purchases.csv\")\n",
        "df.tail()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>label</th>\n",
              "      <th>os</th>\n",
              "      <th>is_mobile</th>\n",
              "      <th>country</th>\n",
              "      <th>pageviews</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>15995</th>\n",
              "      <td>0</td>\n",
              "      <td>Linux</td>\n",
              "      <td>False</td>\n",
              "      <td>United States</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15996</th>\n",
              "      <td>0</td>\n",
              "      <td>Linux</td>\n",
              "      <td>False</td>\n",
              "      <td>United States</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15997</th>\n",
              "      <td>0</td>\n",
              "      <td>Linux</td>\n",
              "      <td>False</td>\n",
              "      <td>United States</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15998</th>\n",
              "      <td>1</td>\n",
              "      <td>Linux</td>\n",
              "      <td>False</td>\n",
              "      <td>United States</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15999</th>\n",
              "      <td>1</td>\n",
              "      <td>Linux</td>\n",
              "      <td>False</td>\n",
              "      <td>United States</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       label     os  is_mobile        country  pageviews\n",
              "15995      0  Linux      False  United States         20\n",
              "15996      0  Linux      False  United States         20\n",
              "15997      0  Linux      False  United States         16\n",
              "15998      1  Linux      False  United States         20\n",
              "15999      1  Linux      False  United States         21"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f8MZpOO2sV5i",
        "colab_type": "code",
        "outputId": "e95209bf-7595-4f02-996d-3c8cd238ab51",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        }
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "Y = df.label\n",
        "X=df.pageviews\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y,train_size=0.8)\n",
        "\n",
        "#切片項追加\n",
        "from statsmodels import api as sm\n",
        "X_train = sm.add_constant(X_train)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
            "  return ptp(axis=axis, out=out, **kwargs)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "91qdA9pTtJO3",
        "colab_type": "code",
        "outputId": "830d8fe2-d12c-478b-89ca-5e4d34a8a56c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        }
      },
      "source": [
        "features = X_train.values\n",
        "labels = np.array(y_train,dtype='float64')\n",
        "\n",
        "# Specify model.\n",
        "model = tfp.glm.Bernoulli()\n",
        "\n",
        "# Fit model given data.\n",
        "coeffs, linear_response, is_converged, num_iter = tfp.glm.fit(\n",
        "    model_matrix=features,\n",
        "    response=labels,\n",
        "    model=model)\n",
        "\n",
        "print(coeffs)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING: Logging before flag parsing goes to stderr.\n",
            "W0827 03:37:19.371737 140339571730304 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/glm/fisher_scoring.py:352: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.where in 2.0, which has the same broadcast rule as np.where\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Tensor(\"fit/while/Exit_2:0\", shape=(2,), dtype=float64)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h6s9LGCd8g9i",
        "colab_type": "code",
        "outputId": "038c0d0c-1c82-43da-abec-287a9dcbefc2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "vars(model)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'_name': 'Bernoulli/'}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "woiMxYuCteXg",
        "colab_type": "code",
        "outputId": "21f9dd32-4965-41a0-f044-9312a03b6e3f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "sess = tf.Session()\n",
        "sess.run(linear_response)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-5.45445699, -5.45445699, -5.3396024 , ..., -2.58309208,\n",
              "       -5.45445699, -5.3396024 ])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GkvimRU8uTTf",
        "colab_type": "code",
        "outputId": "9993d9e7-510b-46de-c922-505b98766d58",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "b=sess.run(coeffs)\n",
        "b"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-5.56931159,  0.1148546 ])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3UI2mcqVwT_r",
        "colab_type": "code",
        "outputId": "2129d69c-a1b6-4b1b-9f6b-40fe0d73f560",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "\n",
        "sigmoid(sess.run(linear_response))"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.00425898, 0.00425898, 0.00477487, ..., 0.07023454, 0.00425898,\n",
              "       0.00477487])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OAcrWJa1wXuL",
        "colab_type": "code",
        "outputId": "e0c250af-cdd8-4b2b-ef03-5c89e5ea508d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "X = df[[\"os\", \"is_mobile\", \"country\", \"pageviews\"]]\n",
        "y = df[\"label\"]\n",
        "np.unique(y, return_counts = True)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1]), array([15835,   165]))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aPjYir7_35v7",
        "colab_type": "text"
      },
      "source": [
        "### オーバーサンプリング"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x3sCar6gxsLu",
        "colab_type": "code",
        "outputId": "9f8df5b2-b0c8-479f-dd9d-4be9a79506c2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        }
      },
      "source": [
        "from imblearn.over_sampling import RandomOverSampler\n",
        "ros = RandomOverSampler(ratio = {0:16000, 1:16000})\n",
        "X_resample, y_resample = ros.fit_sample(X_train, y_train)\n",
        "X_resample.shape"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: DeprecationWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
            "  \"(https://pypi.org/project/six/).\", DeprecationWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/imblearn/utils/_validation.py:257: UserWarning: After over-sampling, the number of samples (16000) in class 0 will be larger than the number of samples in the majority class (class #0 -> 12663)\n",
            "  n_samples_majority))\n",
            "/usr/local/lib/python3.6/dist-packages/imblearn/utils/_validation.py:257: UserWarning: After over-sampling, the number of samples (16000) in class 1 will be larger than the number of samples in the majority class (class #0 -> 12663)\n",
            "  n_samples_majority))\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(32000, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Te_bvjmJmMV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "c6f838b4-b3f4-4306-c8d6-1e95aa0cc6a3"
      },
      "source": [
        "np.unique(y_resample, return_counts = True)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1]), array([16000, 16000]))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tSd58dKUJrgM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "1bf02007-b7d6-476f-9cc0-79cc6a5b584a"
      },
      "source": [
        "y_resample.shape"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(32000,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N8sN2VrvzgFz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#df_resample = pd.DataFrame(X_resample[:,1])\n",
        "#df_resample[\"labels\"] = y_resample\n",
        "#df_resample.head(n = 5)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JEjI5lpi0et4",
        "colab_type": "code",
        "outputId": "6ee72a4a-b81b-4fde-ec4f-d132f05885c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "features = X_resample.astype(np.float64)\n",
        "labels = np.array(y_resample,dtype='float64')\n",
        "\n",
        "# Specify model.\n",
        "model = tfp.glm.Bernoulli()\n",
        "\n",
        "# Fit model given data.\n",
        "coeffs, linear_response, is_converged, num_iter = tfp.glm.fit(\n",
        "    model_matrix=features,\n",
        "    response=labels,\n",
        "    model=model)\n",
        "\n",
        "print(coeffs)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Tensor(\"fit_1/while/Exit_2:0\", shape=(2,), dtype=float64)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1cN-ihnt0oC7",
        "colab_type": "code",
        "outputId": "447dc63c-8490-4d24-e664-e3e46ef891b3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "sess.run(linear_response)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-3.40057161, -3.40057161, -3.04961137, ...,  1.16191145,\n",
              "       16.95512205,  3.6186331 ])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tzwHlQia7Ams",
        "colab_type": "code",
        "outputId": "64e4f141-37ce-4982-e583-6ae9b84b454f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "y_pred=sigmoid(sess.run(linear_response))\n",
        "labels_pred=np.where(y_pred>0.5,1,0)\n",
        "confusion_matrix(y_resample, labels_pred)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[14689,  1311],\n",
              "       [ 1067, 14933]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OvLaiNL684YQ",
        "colab_type": "code",
        "outputId": "0b825e75-9ddb-48c1-f963-4809a3a0988a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "b=sess.run(coeffs)\n",
        "b"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-3.75153185,  0.35096024])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xwOs3mw79pL8",
        "colab_type": "code",
        "outputId": "471a058b-f42b-445f-dc86-6bd17d96b0bf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "#テストデータで検証\n",
        "y_pred_test = sigmoid(b[0]+b[1]*X_test)\n",
        "labels_pred_test=np.where(y_pred_test>0.5,1,0)\n",
        "confusion_matrix(y_test, labels_pred_test)"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2932,  240],\n",
              "       [   1,   27]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gTECv5d2Bwih",
        "colab_type": "text"
      },
      "source": [
        "Recall=0.96(買った人28人中27人適合)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L_ZDO9-yR4n0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# 学習データダウンロード\n",
        "df = pd.DataFrame(X_resample[:,1],y_resample,columns=['pageview'])\n",
        " \n",
        "# CSV ファイル (employee.csv) として出力\n",
        "df.to_csv(\"ga360_train.csv\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oXRzh939SLP_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# テストデータダウンロード\n",
        "df = pd.DataFrame(X_test.values,y_test,columns=['pageview'])\n",
        " \n",
        "# CSV ファイル (employee.csv) として出力\n",
        "df.to_csv(\"ga360_test.csv\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iY6UHOSmXMVw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}